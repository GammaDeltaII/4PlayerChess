#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of the Four-Player Chess project, a four-player chess GUI.
#
# Copyright (C) 2018, GammaDeltaII
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from PyQt5.QtWidgets import QMainWindow, QSizePolicy, QLayout, QListWidget, QListWidgetItem, QListView, QFrame, \
    QFileDialog, QMenu, QAction, QDialog, QDialogButtonBox, QScrollArea
from PyQt5.QtCore import Qt, QSize, QPoint, QRect, QSettings, QUrl
from PyQt5.QtGui import QIcon, QColor, QFont, QFontMetrics, QPainter, QDesktopServices
from ui.mainwindow import Ui_MainWindow
from ui.settings import Ui_Preferences
from ui.infodialog import Ui_InfoDialog
from gui.algorithm import Teams
from gui.view import Comment
from urllib import request
import certifi
from re import compile
from pkg_resources import parse_version

# Load settings
COM = '4pc'
APP = '4PlayerChess'
SETTINGS = QSettings(COM, APP)

# Semantic versioning: N.N.N-{alpha|beta|rc}.N
MAJOR = str(0)
MINOR = str(10)
PATCH = str(0)
PRE_RELEASE = False * ('-' + 'alpha' + str(1))  # alpha, beta or rc (= release candidate)
VERSION = MAJOR + '.' + MINOR + '.' + PATCH + PRE_RELEASE


class MainWindow(QMainWindow, Ui_MainWindow):
    """The application main window. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        # Show license notice
        self.statusbar.showMessage(APP + '. Copyright (C) 2018, GammaDeltaII (GNU GPL-3.0-or-later)', 5000)

        # Create algorithm instance (view instance is already created in UI code)
        self.algorithm = Teams()

        # Create comment label
        self.comment = Comment()
        self.comment.setParent(self.moveListTab)
        self.comment.setEnabled(False)
        self.comment.move(self.commentField.parent().pos())
        self.comment.show()

        # Set piece icons
        pieces = ['rP', 'rN', 'rR', 'rB', 'rQ', 'rK',
                  'bP', 'bN', 'bR', 'bB', 'bQ', 'bK',
                  'yP', 'yN', 'yR', 'yB', 'yQ', 'yK',
                  'gP', 'gN', 'gR', 'gB', 'gQ', 'gK']
        for piece in pieces:
            self.view.setPiece(piece, QIcon('resources/img/pieces/' + piece + '.svg'))

        # Set view size based on board square size
        self.view.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.view.setSquareSize(QSize(50, 50))
        self.layout().setSizeConstraint(QLayout.SetFixedSize)

        # Connect signals
        self.view.clicked.connect(self.viewClicked)
        self.algorithm.boardChanged.connect(self.view.setBoard)  # If algorithm changes board, view must update board
        self.algorithm.currentPlayerChanged.connect(self.view.highlightPlayer)
        self.algorithm.currentPlayerChanged.connect(self.view.highlightChecks)
        self.algorithm.currentPlayerChanged.connect(self.view.setCurrentPlayer)  # For drag-drop
        self.algorithm.moveTextChanged.connect(self.updateMoveList)
        self.algorithm.selectMove.connect(self.selectMove)
        self.algorithm.removeMoveSelection.connect(self.removeMoveSelection)
        self.algorithm.fen4Generated.connect(self.fenField.setPlainText)
        self.algorithm.pgn4Generated.connect(self.pgnField.setPlainText)
        self.algorithm.removeHighlight.connect(self.view.removeHighlightsOfColor)
        self.view.playerNameEdited.connect(self.algorithm.updatePlayerNames)
        self.view.playerRatingEdited.connect(self.algorithm.updatePlayerRating)
        self.algorithm.playerNamesChanged.connect(self.view.setPlayerNames)
        self.algorithm.playerRatingChanged.connect(self.view.setPlayerRating)
        self.algorithm.addHighlight.connect(self.addHighlight)
        self.view.dragStarted.connect(self.selectDragStartSquare)
        self.view.pieceMoved.connect(self.movePiece)
        self.commentField.focusOut.connect(self.setComment)
        self.algorithm.cannotReadPgn4.connect(self.pgnParseError)

        # Connect menu actions
        self.actionCheck_for_Updates.triggered.connect(self.checkUpdate)
        self.actionPreferences.triggered.connect(self.showPreferences)
        self.actionQuit.triggered.connect(self.close)
        self.actionNew_Game.triggered.connect(self.algorithm.newGame)
        self.actionNew_Game.triggered.connect(self.view.repaint)  # Forced repaint
        self.actionNew_Game.triggered.connect(self.moveListWidget.clear)
        self.actionNew_Game.triggered.connect(self.resetComment)
        self.actionLoad_Game.triggered.connect(self.openFileNameDialog)
        self.actionSave_Game_As.triggered.connect(self.saveFileDialog)
        self.actionCopy_FEN4.triggered.connect(self.fenField.selectAll)
        self.actionCopy_FEN4.triggered.connect(self.fenField.copy)
        self.actionCopy_FEN4.triggered.connect(self.repaint)
        self.actionPaste_FEN4.triggered.connect(self.fenField.clear)
        self.actionPaste_FEN4.triggered.connect(self.fenField.paste)
        self.actionPaste_FEN4.triggered.connect(self.repaint)
        self.actionRotate_Board_Left.triggered.connect(lambda: self.view.rotateBoard(-1))
        self.actionRotate_Board_Right.triggered.connect(lambda: self.view.rotateBoard(1))
        self.actionFlip_Board.triggered.connect(lambda: self.view.rotateBoard(2))
        self.actionAbout.triggered.connect(self.about)
        self.actionAbout_PyQt.triggered.connect(self.aboutPyQt)
        self.actionQuick_Reference.triggered.connect(self.quickReference)
        self.actionReport_Bug.triggered.connect(self.reportBug)

        # Connect button actions
        self.boardResetButton.clicked.connect(self.algorithm.newGame)
        self.boardResetButton.clicked.connect(self.view.repaint)  # Forced repaint
        self.boardResetButton.clicked.connect(self.moveListWidget.clear)
        self.boardResetButton.clicked.connect(self.resetComment)
        self.setFenButton.clicked.connect(self.setFen4)
        self.loadPgnButton.clicked.connect(self.openFileNameDialog)
        self.savePgnButton.clicked.connect(self.saveFileDialog)
        self.prevMoveButton.clicked.connect(self.algorithm.prevMove)
        self.prevMoveButton.clicked.connect(self.view.repaint)
        self.nextMoveButton.clicked.connect(self.algorithm.nextMove)
        self.nextMoveButton.clicked.connect(self.view.repaint)
        self.firstMoveButton.clicked.connect(self.algorithm.firstMove)
        self.firstMoveButton.clicked.connect(self.view.repaint)
        self.lastMoveButton.clicked.connect(self.algorithm.lastMove)
        self.lastMoveButton.clicked.connect(self.view.repaint)
        self.comment.clicked.connect(self.editComment)

        # Start new game
        self.algorithm.newGame()

        # Initialize objects
        self.clickPoint = QPoint()
        self.selectedSquare = 0
        self.moveHighlight = 0

    def checkUpdate(self):
        """Checks if update is available and shows update dialog."""
        with request.urlopen('https://github.com/GammaDeltaII/4PlayerChess/releases/latest', cafile=certifi.where()) \
                as response:
            url = response.geturl()
        regex = compile('[0-9]+.[0-9]+.[0-9]+')
        index = regex.search(url).span()
        latest = url[index[0]:index[1]]
        updateDialog = InfoDialog()
        updateDialog.setWindowTitle('Check for Updates...')
        if parse_version(latest) > parse_version(VERSION):
            updateDialog.label.setText("""
                <center>
                <p style = 'font-size: 20px;'><b>Update available!</b></p>
                <br><br>
                <a href = '""" + url + """' style = 'color:grey;'>4PlayerChess (""" + latest + """)</a>
                <br>
                <small>
                <p>(Current version: """ + VERSION + """)</p>
                </small>
                </center>
                """)
        else:
            updateDialog.label.setText("""
                <center>
                <p style = 'font-size: 20px;'><b>No update available.</b></p>
                <br><br>
                Current version (""" + VERSION + """) is latest version.
                </center>
                """)
        updateDialog.exec_()

    def about(self):
        """Shows application info dialog."""
        aboutDialog = InfoDialog()
        aboutDialog.setWindowTitle('About 4PlayerChess')
        aboutDialog.label.setText("""
            <center>
            <p><b>4PlayerChess</b></p>
            <small>
            <p>Version """ + VERSION + """</p>
            <p>Copyright &copy; 2018, GammaDeltaII</p>
            <p>This software is licensed under the GNU General Public License v3.0 or later<br>
            <a href = 'https://www.gnu.org/licenses/gpl-3.0' style = 'color:grey;'>
            https://www.gnu.org/licenses/gpl-3.0</a></p>
            </small>
            </center>
            """)
        aboutDialog.exec_()

    def aboutPyQt(self):
        """Shows PyQt info dialog."""
        aboutPyQt = InfoDialog()
        aboutPyQt.resize(400, 320)
        aboutPyQt.label.resize(300, 140)
        buttonPos = aboutPyQt.buttonBox.pos()
        aboutPyQt.buttonBox.move(aboutPyQt.width() / 2 - aboutPyQt.buttonBox.width() / 2,
                                 buttonPos.y() + (aboutPyQt.height() - 300))
        aboutPyQt.setWindowTitle('About PyQt')
        aboutPyQt.label.setText("""
            <center>
            <p><b>This software uses PyQt5</b></p>
            <small>
            <p>PyQt5 is a comprehensive set of Python bindings for Qt 5. PyQt brings together the Qt 
            C++ cross-platform application framework and the cross-platform interpreted language Python.</p>
            <p>PyQt is copyright &copy; <a href = 'https://www.riverbankcomputing.com/software/pyqt/' style = 
            'color:white;'>Riverbank Computing Ltd.</a></p>
            <p>Qt is copyright &copy; <a href = 'https://www.qt.io' style =
            'color:white;'>The Qt Company Ltd.</a></p>
            </small>
            </center>
            """)
        aboutPyQt.exec_()

    def quickReference(self):
        """Shows quick reference guide."""
        quickReferenceDialog = InfoDialog()
        quickReferenceDialog.resize(700, 700)
        quickReferenceDialog.label.setFixedWidth(quickReferenceDialog.width() - 100)
        scrollArea = QScrollArea(quickReferenceDialog)
        scrollArea.move(quickReferenceDialog.label.pos())
        labelSize = quickReferenceDialog.label.size()
        scrollArea.resize(labelSize.width() + 20, quickReferenceDialog.height() - 180)
        buttonPos = quickReferenceDialog.buttonBox.pos()
        quickReferenceDialog.buttonBox.move(quickReferenceDialog.width() / 2 - quickReferenceDialog.buttonBox.width()
                                            / 2, buttonPos.y() + (quickReferenceDialog.height() - 300))

        quickReferenceDialog.setWindowTitle('Quick Reference Guide')
        quickReferenceDialog.label.setText("""
            <center><h1>Quick Reference Guide</h1></center>
            <h3>Shortcuts</h3><small>(on Mac use &#8984; instead of Ctrl)</small>
            <table>
                <tr><td width = '50'>Ctrl+Q</td><td>Quit application</td></tr>
                <tr><td>Ctrl+N</td><td>New game</td></tr>
                <tr><td>Ctrl+O</td><td>Load game from PGN4 file</td></tr>
                <tr><td>Ctrl+S</td><td>Save game to PGN4 file</td></tr>
                <tr><td>Ctrl+C</td><td>Copy FEN4 to clipboard</td></tr>
                <tr><td>Ctrl+V</td><td>Paste FEN4 from clipboard</td></tr>
                <tr><td>Ctrl+L</td><td>Rotate board left (counterclockwise, next player)</td></tr>
                <tr><td>Ctrl+R</td><td>Rotate board right (clockwise, previous player)</td></tr>
                <tr><td>Ctrl+F</td><td>Flip board</td></tr>
                <tr><td>&rarr;</td><td>Go to next move</td></tr>
                <tr><td>&larr;</td><td>Go to previous move</td></tr>
                <tr><td>&uarr;</td><td>Go to first move</td></tr>
                <tr><td>&darr;</td><td>Go to last move</td></tr>
            </table>
            <h3>Arrows &amp; square highlights</h3>
            <ul>
                <li>Right-click on a square to highlight the square.</li>
                <li>Right-click and drag to draw arrows.</li>
                <li>Hold numeric key 0, 1, 2, 3 or 4 while clicking or dragging for orange (default), red, blue, yellow 
                or green, respectively.</li>
                <li>Left-click any empty square to remove all arrows and highlighted squares.</li>
                <li>Left-clicking any empty square while holding numeric key 0, 1, 2, 3 or 4 will remove all arrows and 
                square highlights of the respective color only.</li>
                <li>Drawing an existing arrow or square highlight again will remove it.</li>
            </ul>
            <h3>Move list</h3>
            <ul>
                <li>Left-click a move to go to that move.</li>
                <li>Right-click a move to delete the move or promote the variation it is part of.</li>
                <li>Enter a comment in the comment field to save a comment for the selected move.</li>
            </ul>
            <h3>Player names and rating</h3>
            <ul>
                <li>Click a player name to edit the name and rating. You can specify the rating by typing the name 
                followed by a space and then the rating.</li>
            </ul>
            <h3>Preferences</h3>
            <ul>
                <li>'Show mouseover coordinate' will display the coordinate of a square when moving the mouse over it.
                </li>
                <li>'Auto-change arrow color' will change the color of arrows and square highlights with the board 
                orientation, e.g. if the bottom player is red, the color will be red. If unchecked, the default color 
                will be orange.</li>
                <li>'Auto-rotate' will automatically rotate the board 90 degrees counterclockwise after each move. The 
                current player will always be at the bottom, unless the board is manually rotated, e.g. if the board is 
                manually flipped, the current player will always be at the top.</li>
                <li>'Use chess.com FEN4 and PGN4' enables loading and saving chess.com compatible FEN4 and PGN4. NOTE:
                chess.com does NOT currently support subvariations. If you have subvariations in your PGN4, the 
                chess.com analysis board will not be able to read it.</li>
                <li>Preferences are saved to a platform-specific preferences file, which is displayed in the status bar 
                at the bottom after saving.</li>
            </ul>
            """)
        quickReferenceDialog.label.adjustSize()
        scrollArea.setWidget(quickReferenceDialog.label)
        scrollArea.show()
        quickReferenceDialog.exec_()

    def reportBug(self):
        """Opens link to GitHub issues."""
        QDesktopServices().openUrl(QUrl('https://github.com/GammaDeltaII/4PlayerChess/issues'))

    def addHighlight(self, fromFile, fromRank, toFile, toRank, color):
        """Adds move highlight to board view."""
        fromSquare = self.view.SquareHighlight(fromFile, fromRank, color)
        self.view.addHighlight(fromSquare)
        toSquare = self.view.SquareHighlight(toFile, toRank, color)
        self.view.addHighlight(toSquare)

    def viewClicked(self, square):
        """Handles view click event to move clicked piece to clicked square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        if self.clickPoint.isNull():
            squareData = self.view.board.getData(square.x(), square.y())
            if squareData != ' ' and squareData[0] == self.algorithm.currentPlayer:
                self.clickPoint = square
                self.selectedSquare = self.view.SquareHighlight(square.x(), square.y(), color)
                self.view.addHighlight(self.selectedSquare)
                self.view.showLegalMoves()
        else:
            self.view.removeLegalMoveIndicators()
            moved = False
            if square != self.clickPoint:
                moved = self.algorithm.makeMove(self.clickPoint.x(), self.clickPoint.y(), square.x(), square.y())
            self.clickPoint = QPoint()
            if not moved:
                self.view.removeHighlight(self.selectedSquare)
            else:
                self.moveHighlight = self.view.SquareHighlight(square.x(), square.y(), color)
                self.view.addHighlight(self.moveHighlight)
                self.view.highlightChecks()
                # Remove highlights of next player
                if self.algorithm.currentPlayer == self.algorithm.Red:
                    color = QColor('#33bf3b43')
                elif self.algorithm.currentPlayer == self.algorithm.Blue:
                    color = QColor('#334185bf')
                elif self.algorithm.currentPlayer == self.algorithm.Yellow:
                    color = QColor('#33c09526')
                elif self.algorithm.currentPlayer == self.algorithm.Green:
                    color = QColor('#334e9161')
                else:
                    color = QColor('#00000000')
                self.view.removeHighlightsOfColor(color)
                self.moveHighlight = 0
            self.selectedSquare = 0

    def selectDragStartSquare(self, square):
        """Highlights the dragged piece origin square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        # Remove click highlight, if it exists
        if self.selectedSquare:
            self.view.removeHighlight(self.selectedSquare)
            self.clickPoint = QPoint()
            self.selectedSquare = 0
        squareData = self.view.board.getData(square.x(), square.y())
        if squareData != ' ' and squareData[0] == self.algorithm.currentPlayer:
            self.selectedSquare = self.view.SquareHighlight(square.x(), square.y(), color)
            self.view.addHighlight(self.selectedSquare)

    def movePiece(self, fromSquare, toSquare):
        """Handles piece drag event to move dragged piece to drop square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        moved = self.algorithm.makeMove(fromSquare.x(), fromSquare.y(), toSquare.x(), toSquare.y())
        if not moved:
            self.view.removeHighlight(self.selectedSquare)
            self.view.maskedSquare = None
        else:
            self.moveHighlight = self.view.SquareHighlight(toSquare.x(), toSquare.y(), color)
            self.view.addHighlight(self.moveHighlight)
            self.view.highlightChecks()
            # Remove highlights of next player
            if self.algorithm.currentPlayer == self.algorithm.Red:
                color = QColor('#33bf3b43')
            elif self.algorithm.currentPlayer == self.algorithm.Blue:
                color = QColor('#334185bf')
            elif self.algorithm.currentPlayer == self.algorithm.Yellow:
                color = QColor('#33c09526')
            elif self.algorithm.currentPlayer == self.algorithm.Green:
                color = QColor('#334e9161')
            else:
                color = QColor('#00000000')
            self.view.removeHighlightsOfColor(color)
            self.moveHighlight = 0
        self.selectedSquare = 0

    def keyPressEvent(self, event):
        """Handles arrow key press events to go to previous, next, first or last move. Also stores key modifier for View
        to draw different color arrows and squares."""
        if event.key() == Qt.Key_Left:
            self.algorithm.prevMove()
        if event.key() == Qt.Key_Right:
            self.algorithm.nextMove()
        if event.key() == Qt.Key_Up:
            self.algorithm.firstMove()
        if event.key() == Qt.Key_Down:
            self.algorithm.lastMove()
        self.view.keyModifier = event.key()

    def keyReleaseEvent(self, event):
        """Resets key modifier for View."""
        self.view.keyModifier = None

    def pgnParseError(self):
        """Shows dialog explaining the PGN4 cannot be read and settings may need to be changed."""
        pgnErrorDialog = InfoDialog()
        pgnErrorDialog.setWindowTitle('PGN4 parse error')
        pgnErrorDialog.label.setText("""
                    <center>
                    <p><b>Cannot read PGN4!</b></p>
                    <p>If you are trying to load a chess.com PGN4, please make sure the checkbox in settings is 
                    <i>checked</i>. If not, make sure it is <i>unchecked</i>. You can only load a Teams variant PGN4. 
                    FFA is not supported. If the issue remains, please report it.
                    </p>
                    </center>
                    """)
        pgnErrorDialog.exec_()

    def openFileNameDialog(self):
        """Shows file dialog to load a game from a PGN4 file."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        # noinspection PyCallByClass,PyTypeChecker
        fileName, _ = QFileDialog.getOpenFileName(self, "Load Game", "data/games/",
                                                  "PGN4 Files (*.pgn4)", options=options)
        if fileName:
            with open(fileName, 'r') as file:
                pgn4 = ''.join(file.readlines())
                self.pgnField.setPlainText(pgn4)
                if SETTINGS.value('chesscom'):
                    loaded = self.algorithm.parseChesscomPgn4(pgn4)
                else:
                    loaded = self.algorithm.parsePgn4(pgn4)
                if loaded:
                    self.statusbar.showMessage('Game loaded successfully.', 5000)

    def saveFileDialog(self):
        """Shows file dialog to save a game to a PGN4 file."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        # noinspection PyTypeChecker,PyCallByClass
        fileName, _ = QFileDialog.getSaveFileName(self, "Save Game", "data/games/",
                                                  "PGN4 Files (*.pgn4)", options=options)
        if fileName:
            ext = '.pgn4'
            if ext not in fileName:
                fileName += ext
            with open(fileName, 'w') as file:
                pgn4 = self.pgnField.toPlainText()
                file.writelines(pgn4)
                self.statusbar.showMessage('Game saved.', 5000)

    def setFen4(self):
        """Gets FEN4 from the text field to set the board accordingly."""
        fen4 = self.fenField.toPlainText()
        self.algorithm.setBoardState(fen4)
        self.moveListWidget.clear()
        self.resetComment()
        self.view.repaint()  # Forced repaint

    def setMoveComment(self, comment=True):
        """Saves comment for current move."""
        if comment:
            text = self.commentField.toPlainText()
            text = text.replace('\n', ' ')
            self.algorithm.currentMove.comment = text
        else:
            self.algorithm.currentMove.comment = None

    def editComment(self):
        """Activates comment edit field."""
        if self.algorithm.currentMove.comment:
            self.commentField.setPlainText(self.algorithm.currentMove.comment)
            self.commentField.selectAll()
        else:
            self.commentField.clear()
        self.comment.setHidden(True)
        self.commentField.setFocus(True)

    def setComment(self):
        """Updates comment and deactivates comment edit field."""
        if self.commentField.toPlainText():
            self.comment.setText(self.commentField.toPlainText())
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: black;
                font-family: Trebuchet MS;
                """)
            self.setMoveComment()
            self.algorithm.updateMoveText()
            self.algorithm.getPgn4()
        else:
            if self.algorithm.currentMove.name != 'root':
                self.comment.setText('Enter comment for this move...')
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: grey;
                font-family: Trebuchet MS;
                """)
            self.setMoveComment(False)
        self.comment.setHidden(False)

    def resetComment(self):
        """Resets move comment."""
        self.comment.setText('')
        self.comment.setEnabled(False)
        self.commentField.clear()
        self.comment.setStyleSheet("""
            border: 0px;
            padding: 4px;
            border-radius: 0px;
            background-color: white;
            text-align: top left;
            color: grey;
            font-family: Trebuchet MS;
            """)

    def showComment(self, node):
        """Shows comment for current move."""
        if node.comment:
            self.comment.setText(node.comment)
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: black;
                font-family: Trebuchet MS;
                """)
        else:
            if node.name != 'root':
                self.comment.setText('Enter comment for this move...')
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: grey;
                font-family: Trebuchet MS;
                """)

    def updateMoveList(self, moveText):
        """Updates move list based on movetext."""
        main = self  # used to access outer class in inner class

        class Row(QListWidget):
            """Custom QListWidget class for rows in move list."""
            def __init__(self):
                super().__init__()
                self.setFlow(QListView.LeftToRight)
                self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
                self.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
                self.setWrapping(True)
                self.setFrameShape(QFrame.NoFrame)
                self.setFocusPolicy(Qt.NoFocus)
                self.setContextMenuPolicy(Qt.CustomContextMenu)
                self.customContextMenuRequested.connect(self.showContextMenu)
                self.actionDelete = QAction(None)
                self.actionDelete.setObjectName("actionDelete")
                self.actionDelete.setText('Delete move')
                self.actionDelete.triggered.connect(self.deleteMove)
                self.actionPromote = QAction(None)
                self.actionPromote.setObjectName("actionPromote")
                self.actionPromote.setText('Promote variation')
                self.actionPromote.triggered.connect(self.promoteVariation)
                self.moveIndex = 0
                self.setStyleSheet("""
                    QListWidget {color: rgb(0, 0, 0); font-family: Trebuchet MS; font-weight: bold; font-size: 12;
                    padding: 2px; margin: 0px;}
                    QListWidget::item:selected {background-color: rgba(255, 255, 0, 0.3);}
                    """)

            def sizeHint(self):
                """Implements sizeHint() method."""
                width = 290
                rows = 1
                rowWidth = 0
                for index in range(self.count()):
                    rowWidth += self.item(index).sizeHint().width()
                    if rowWidth > width:
                        rows += 1
                        rowWidth = self.item(index).sizeHint().width()
                fm = QFontMetrics(QFont('Trebuchet MS', 12, QFont.Bold))
                padding = 2  # Row padding
                height = fm.height() * rows + 2 * padding
                return QSize(width, height)

            def showContextMenu(self, pos):
                """Shows context menu when right-clicking a move in the move list."""
                item = self.itemAt(pos)
                char = item.text()[0]
                if char.isdigit() or char == '(' or char == ')' or char == '.':
                    item.setSelected(False)
                    return
                else:
                    position = self.mapToGlobal(pos)
                    menu = QMenu()
                    menu.addAction(self.actionPromote)
                    menu.addAction(self.actionDelete)
                    menu.exec_(position)

            def promoteVariation(self):
                """Promotes variation that selected move is part of."""
                rowIndex = self.currentRow()
                item = self.item(rowIndex)
                moveIndex = None
                count = 0
                for index in range(main.moveListWidget.count()):
                    row = main.moveListWidget.itemWidget(main.moveListWidget.item(index))
                    if row != self:
                        count += row.count()
                    elif row == self:
                        itemIndex = 0
                        while itemIndex < row.count():
                            baseItem = self.item(itemIndex)
                            char = baseItem.text()[0]
                            if char.isdigit() or char == '(' or char == ')' or char == '.':
                                itemIndex += 1
                            else:
                                baseIndex = count + itemIndex
                                break
                        count += rowIndex
                        moveIndex = count
                key = (moveIndex, item.text())
                baseKey = (baseIndex, baseItem.text())
                currentNode = main.algorithm.moveDict[key]
                baseNode = main.algorithm.moveDict[baseKey]  # first node of variation
                parentNode = baseNode.parent
                # Set position to move that was selected
                actions = currentNode.pathFromRoot()
                main.algorithm.firstMove()
                for action in actions:
                    exec('main.algorithm.' + action)
                # Update move tree
                parentNode.children.remove(baseNode)
                parentNode.children.insert(0, baseNode)  # moving node to index 0 makes it main line
                # Update movetext, dictionary, FEN4 and PGN4
                main.algorithm.updateMoveText()
                main.algorithm.getFen4()
                main.algorithm.getPgn4()

            def deleteMove(self):
                """Deletes move from the move list and updates the position."""
                rowIndex = self.currentRow()
                item = self.item(rowIndex)
                moveIndex = None
                count = 0
                for index in range(main.moveListWidget.count()):
                    row = main.moveListWidget.itemWidget(main.moveListWidget.item(index))
                    if row != self:
                        count += row.count()
                    elif row == self:
                        count += rowIndex
                        moveIndex = count
                key = (moveIndex, item.text())
                currentNode = main.algorithm.moveDict[key]
                # Set position to move preceding deleted move
                actions = currentNode.parent.pathFromRoot()
                main.algorithm.firstMove()
                for action in actions:
                    exec('main.algorithm.' + action)
                # Delete move and all following moves
                for i in reversed(range(rowIndex, self.count())):  # NOTE: reversed range, because modified during loop
                    move = self.takeItem(i)
                    del move
                # Delete node from move tree and update movetext, dictionary, FEN4 and PGN4
                main.algorithm.currentMove.children.remove(currentNode)
                main.algorithm.updateMoveText()
                main.algorithm.getFen4()
                main.algorithm.getPgn4()

        class RowItem(QListWidgetItem):
            """Custom QListWidgetItem class for row items in move list rows."""
            def __init__(self, text):
                super().__init__(text)
                self.setTextAlignment(Qt.AlignCenter)

            def sizeHint(self):
                """Implements sizeHint() method."""
                fm = QFontMetrics(QFont('Trebuchet MS', 12, QFont.Bold))
                spacing = 10  # TODO get rid of the item spacing somehow
                width = fm.width(self.text()) + 2 * spacing
                height = fm.height()
                return QSize(width, height)

        self.moveListWidget.clear()
        tokens = self.algorithm.split_(moveText)
        row = Row()
        row.itemClicked.connect(lambda item, this=row: self.moveListItemClicked(item, this))
        level = 0
        for token in tokens:
            rowItem = RowItem(token)
            rowItem.setSizeHint(rowItem.sizeHint())  # Update size hack
            if token[0] == '{':
                # Comment
                self.commentField.setPlainText(token[1:-1])
            elif token == '(':
                # Start of new variation
                level += 1
                if not row.count() == 0:
                    listItem = QListWidgetItem(self.moveListWidget)
                    listItem.setSizeHint(row.sizeHint())
                    self.moveListWidget.addItem(listItem)
                    self.moveListWidget.setItemWidget(listItem, row)
                row = Row()
                row.itemClicked.connect(lambda item, this=row: self.moveListItemClicked(item, this))
                if level == 1:
                    row.setStyleSheet("""
                        QListWidget {color: rgb(100, 100, 100); font-family: Trebuchet MS; font-weight: bold; 
                        font-size: 12; background-color: rgb(240, 240, 240); padding: 2px; margin: 0px;}
                        QListWidget::item:selected {color: rgb(100, 100, 100); 
                        background-color: rgba(255, 255, 0, 0.3);}
                        """)
                elif level > 1:
                    row.setStyleSheet("""
                        QListWidget {color: rgb(150, 150, 150); font-family: Trebuchet MS; font-weight: bold; 
                        font-size: 12; background-color: rgb(240, 240, 240); padding: 2px; margin: 0px;}
                        QListWidget::item:selected {color: rgb(150, 150, 150); 
                        background-color: rgba(255, 255, 0, 0.3);}
                        """)
                else:
                    # Do nothing. Main line uses default stylesheet
                    pass
                row.addItem(rowItem)
            elif token == ')':
                # End of variation
                level -= 1
                row.addItem(rowItem)
                listItem = QListWidgetItem(self.moveListWidget)
                listItem.setSizeHint(row.sizeHint())
                self.moveListWidget.addItem(listItem)
                self.moveListWidget.setItemWidget(listItem, row)
                row = Row()
                row.itemClicked.connect(lambda item, this=row: self.moveListItemClicked(item, this))
                if level == 1:
                    row.setStyleSheet("""
                        QListWidget {color: rgb(100, 100, 100); font-family: Trebuchet MS; font-weight: bold; 
                        font-size: 12; background-color: rgb(240, 240, 240); padding: 2px; margin: 0px;}
                        QListWidget::item:selected {color: rgb(100, 100, 100); 
                        background-color: rgba(255, 255, 0, 0.3);}
                        """)
                elif level > 1:
                    row.setStyleSheet("""
                        QListWidget {color: rgb(150, 150, 150); font-family: Trebuchet MS; font-weight: bold; 
                        font-size: 12; background-color: rgb(240, 240, 240); padding: 2px; margin: 0px;}
                        QListWidget::item:selected {color: rgb(150, 150, 150); 
                        background-color: rgba(255, 255, 0, 0.3);}
                        """)
                else:
                    # Do nothing. Main line uses default stylesheet
                    pass
            else:
                row.addItem(rowItem)
        listItem = QListWidgetItem(self.moveListWidget)
        listItem.setSizeHint(row.sizeHint())
        self.moveListWidget.addItem(listItem)
        self.moveListWidget.setItemWidget(listItem, row)

    def moveListItemClicked(self, clickedItem, clickedRow):
        """Handles move list click event to set game state to clicked move."""
        char = clickedItem.text()[0]
        # If clicked item is not a move, remove selection
        if char.isdigit() or char == '(' or char == ')' or char == '.':
            clickedItem.setSelected(False)
        else:
            # Remove previous selection from other row, if any
            moveIndex = None
            count = 0
            for index in range(self.moveListWidget.count()):
                row = self.moveListWidget.itemWidget(self.moveListWidget.item(index))
                if row != clickedRow:
                    count += row.count()
                    if row.selectedItems():
                        for item in row.selectedItems():
                            item.setSelected(False)
                elif row == clickedRow:
                    count += row.row(clickedItem)
                    moveIndex = count

            # Get node from dictionary and do actions to get to node from root
            key = (moveIndex, clickedItem.text())
            clickedNode = self.algorithm.moveDict[key]
            if clickedNode:
                actions = clickedNode.pathFromRoot()
                self.algorithm.firstMove()
                for action in actions:
                    exec('self.algorithm.' + action)

    def selectMove(self, key):
        """Makes current move selected in the move list."""
        self.showComment(self.algorithm.moveDict[key])
        if self.algorithm.currentMove.name != 'root':
            self.comment.setEnabled(True)
        else:
            self.comment.setEnabled(False)
        moveIndex = key[0]
        index = 0
        notFound = True
        while notFound:
            row = self.moveListWidget.itemWidget(self.moveListWidget.item(index))
            rowLength = row.count()
            if moveIndex > rowLength - 1:
                moveIndex -= rowLength
                index += 1
            else:
                row.item(moveIndex).setSelected(True)
                notFound = False
        # Remove selection from other rows
        for rowIndex in range(self.moveListWidget.count()):
            row = self.moveListWidget.itemWidget(self.moveListWidget.item(rowIndex))
            if rowIndex != index and row.selectedItems:
                for item in row.selectedItems():
                    item.setSelected(False)

    def removeMoveSelection(self):
        """Removes move selection in move list."""
        for index in range(self.moveListWidget.count()):
            row = self.moveListWidget.itemWidget(self.moveListWidget.item(index))
            if row.selectedItems():
                for item in row.selectedItems():
                    item.setSelected(False)

    def showPreferences(self):
        """Shows preferences window. Settings are passed to the dialog, modified and then returned."""
        preferencesDialog = Preferences()
        if preferencesDialog.exec_():
            self.statusbar.showMessage('Preferences saved to: ' + SETTINGS.fileName(), 5000)


class Preferences(QDialog, Ui_Preferences):
    """The preferences dialog. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.initialize()

        # Connect button actions
        self.buttonBox.accepted.connect(self.save)
        self.buttonBox.button(QDialogButtonBox.RestoreDefaults).clicked.connect(self.restoreDefaults)

    def initialize(self):
        """Sets preferences to saved values. Sets default values if no preferences saved."""
        self.showcoordinates.setChecked(SETTINGS.value('showcoordinates', False))
        self.showlegalmoves.setChecked(SETTINGS.value('showlegalmoves', False))
        self.coordinatehelp.setChecked(SETTINGS.value('coordinatehelp', False))
        self.shownames.setChecked(SETTINGS.value('shownames', False))
        self.autocolor.setChecked(SETTINGS.value('autocolor', False))
        self.autorotate.setChecked(SETTINGS.value('autorotate', False))
        self.chesscom.setChecked(SETTINGS.value('chesscom', False))

    def save(self):
        """Saves preferences."""
        SETTINGS.setValue('showcoordinates', self.showcoordinates.isChecked())
        SETTINGS.setValue('showlegalmoves', self.showlegalmoves.isChecked())
        SETTINGS.setValue('coordinatehelp', self.coordinatehelp.isChecked())
        SETTINGS.setValue('shownames', self.shownames.isChecked())
        SETTINGS.setValue('autocolor', self.autocolor.isChecked())
        SETTINGS.setValue('autorotate', self.autorotate.isChecked())
        SETTINGS.setValue('chesscom', self.chesscom.isChecked())

    def restoreDefaults(self):
        """Restores default preferences."""
        self.showcoordinates.setChecked(False)
        self.showlegalmoves.setChecked(False)
        self.coordinatehelp.setChecked(False)
        self.shownames.setChecked(False)
        self.autocolor.setChecked(False)
        self.autorotate.setChecked(False)
        self.chesscom.setChecked(False)


class InfoDialog(QDialog, Ui_InfoDialog):
    """The application info dialog. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def paintEvent(self, event):
        """Implements paintEvent() method."""
        painter = QPainter()
        painter.begin(self)
        icon = QIcon('resources/img/icon.svg')
        width = 80
        height = 80
        x = (self.width() - width) / 2
        y = 20
        rect = QRect(x, y, width, height)
        icon.paint(painter, rect, Qt.AlignCenter)
        painter.end()
